---
# Superset Postgres Service
apiVersion: v1
kind: Service
metadata:
  name: superset-postgres
  labels:
    app.kubernetes.io/name: superset-postgres
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  type: ClusterIP
  ports:
    - port: {{ .Values.superset.postgres.service.port }}
      targetPort: 5432
      protocol: TCP
      name: postgres
  selector:
    app.kubernetes.io/name: superset-postgres
    app.kubernetes.io/instance: {{ .Release.Name }}

---
# Superset Postgres Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: superset-postgres
  labels:
    app.kubernetes.io/name: superset-postgres
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: superset-postgres
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: superset-postgres
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: postgres
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.superset.postgres.image.repository }}:{{ .Values.superset.postgres.image.tag }}"
          imagePullPolicy: {{ .Values.global.pullPolicy }}
          ports:
            - name: postgres
              containerPort: 5432
              protocol: TCP
          env:
            - name: POSTGRES_DB
              value: "{{ .Values.superset.postgres.auth.database }}"
            - name: POSTGRES_USER
              value: "{{ .Values.superset.postgres.auth.user }}"
            - name: POSTGRES_PASSWORD
              value: "{{ .Values.superset.postgres.auth.password }}"
          resources:
            requests:
              memory: "{{ .Values.superset.postgres.resources.requests.memory }}"
              cpu: "{{ .Values.superset.postgres.resources.requests.cpu }}"
            limits:
              memory: "{{ .Values.superset.postgres.resources.limits.memory }}"
              cpu: "{{ .Values.superset.postgres.resources.limits.cpu }}"
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
          livenessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - "{{ .Values.superset.postgres.auth.user }}"
                - -d
                - "{{ .Values.superset.postgres.auth.database }}"
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 10
            failureThreshold: 5
          readinessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - "{{ .Values.superset.postgres.auth.user }}"
                - -d
                - "{{ .Values.superset.postgres.auth.database }}"
            initialDelaySeconds: 10
            periodSeconds: 15
            timeoutSeconds: 10
            failureThreshold: 5
          resources:
            {{- toYaml .Values.resources.postgres | nindent 12 }}
      volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: superset-postgres-pvc

---
# Superset ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: superset-config
  labels:
    app.kubernetes.io/name: superset
    app.kubernetes.io/instance: {{ .Release.Name }}
data:
  superset_config.py: |
    from superset.config import *
    
    # Database configuration
    SQLALCHEMY_DATABASE_URI = 'postgresql://{{ .Values.superset.postgres.auth.user }}:{{ .Values.superset.postgres.auth.password }}@superset-postgres:{{ .Values.superset.postgres.service.port }}/{{ .Values.superset.postgres.auth.database }}'
    
    # Secret key
    SECRET_KEY = '{{ .Values.superset.auth.secretKey }}'
    
    # Additional configurations can be added here

---
# Superset Service
apiVersion: v1
kind: Service
metadata:
  name: superset
  labels:
    app.kubernetes.io/name: superset
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  type: ClusterIP
  ports:
    - port: {{ .Values.superset.service.port }}
      targetPort: 8088
      protocol: TCP
      name: superset
  selector:
    app.kubernetes.io/name: superset
    app.kubernetes.io/instance: {{ .Release.Name }}

---
# Superset Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: superset
  labels:
    app.kubernetes.io/name: superset
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: superset
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: superset
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: wait-for-postgres
          image: postgres:13
          command:
            - sh
            - -c
            - |
              until pg_isready -h superset-postgres -p 5432 -U {{ .Values.superset.postgres.auth.user }}; do
                echo "Waiting for postgres..."
                sleep 2
              done
      containers:
        - name: superset
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.superset.image.repository }}:{{ .Values.superset.image.tag }}"
          imagePullPolicy: {{ .Values.global.pullPolicy }}
          ports:
            - name: superset
              containerPort: 8088
              protocol: TCP
          env:
            - name: SUPERSET_CONFIG_PATH
              value: "/app/superset_config.py"
            - name: SUPERSET_SECRET_KEY
              value: "{{ .Values.superset.auth.secretKey }}"
          volumeMounts:
            - name: superset-config
              mountPath: /app/superset_config.py
              subPath: superset_config.py
            - name: superset-home
              mountPath: /app/superset_home
          command:
            - bash
            - -c
            - |
              pip install psycopg2-binary &&
              superset db upgrade &&
              superset fab create-admin --username {{ .Values.superset.auth.adminUsername }} --firstname Superset --lastname Admin --email {{ .Values.superset.auth.adminEmail }} --password {{ .Values.superset.auth.adminPassword }} &&
              superset init &&
              superset run -h 0.0.0.0 -p 8088 --with-threads --reload --debugger
          resources:
            {{- toYaml .Values.resources.superset | nindent 12 }}
      volumes:
        - name: superset-config
          configMap:
            name: superset-config
        - name: superset-home
          persistentVolumeClaim:
            claimName: superset-home-pvc
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}