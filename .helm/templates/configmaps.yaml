---
apiVersion: v1
kind: ConfigMap
metadata:
  name: druid-config
  labels:
    app.kubernetes.io/name: druid
    app.kubernetes.io/instance: {{ .Release.Name }}
data:
  # Java tuning
  DRUID_XMX: "1g"
  DRUID_XMS: "1g"
  DRUID_MAXNEWSIZE: "250m"
  DRUID_NEWSIZE: "250m"
  DRUID_MAXDIRECTMEMORYSIZE: "6172m"
  
  # Druid configuration
  druid_emitter_logging_logLevel: "debug"
  druid_extensions_loadList: '["druid-histogram", "druid-datasketches", "druid-lookups-cached-global", "postgresql-metadata-storage"]'
  
  # Zookeeper configuration
  druid_zk_service_host: "zookeeper"
  
  # Metadata storage configuration
  druid_metadata_storage_host: "druid-postgres"
  druid_metadata_storage_type: "postgresql"
  druid_metadata_storage_connector_connectURI: "jdbc:postgresql://druid-postgres:5432/druid"
  druid_metadata_storage_connector_user: "druid"
  druid_metadata_storage_connector_password: "FoolishPassword"
  
  # Coordinator configuration
  druid_coordinator_balancer_strategy: "cost"
  
  # Indexer configuration
  druid_indexer_runner_javaOptsArray: '["-server", "-Xmx1g", "-Xms1g", "-XX:MaxDirectMemorySize=3g", "-Duser.timezone=UTC", "-Dfile.encoding=UTF-8", "-Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager"]'
  druid_indexer_fork_property_druid_processing_buffer_sizeBytes: "256MiB"
  
  # Storage configuration
  druid_storage_type: "local"
  druid_storage_storageDirectory: "/opt/shared/segments"
  druid_indexer_logs_type: "file"
  druid_indexer_logs_directory: "/opt/shared/indexing-logs"
  
  # Processing configuration
  druid_processing_numThreads: "2"
  druid_processing_numMergeBuffers: "2"

  druid_coordinator_service: "druid-coordinator"
  druid_broker_service: "druid-broker"
  
  # Router needs to know defaults
  # druid_router_defaultBrokerServiceName: druid-broker
  # druid_router_defaultCoordinatorServiceName: druid-coordinator
  # druid.selectors.coordinator.serviceName: "druid-coordinator"
  # druid.selectors.indexing.serviceName: "druid-overlord"
  
  # Logging configuration
  DRUID_LOG4J: |
    <?xml version="1.0" encoding="UTF-8" ?>
    <Configuration status="WARN">
      <Appenders>
        <Console name="Console" target="SYSTEM_OUT">
          <PatternLayout pattern="%d{ISO8601} %p [%t] %c - %m%n"/>
        </Console>
      </Appenders>
      <Loggers>
        <Root level="info">
          <AppenderRef ref="Console"/>
        </Root>
        <Logger name="org.apache.druid.jetty.RequestLog" additivity="false" level="DEBUG">
          <AppenderRef ref="Console"/>
        </Logger>
      </Loggers>
    </Configuration>
    
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "chart.fullname" . }}-minio-env
  labels:
    {{- include "chart.labels" . | nindent 4 }}
data:
  MINIO_ROOT_USER: {{ .Values.minio.auth.accessKey | quote }}
  MINIO_ROOT_PASSWORD: {{ .Values.minio.auth.secretKey | quote }}
  MINIO_ENDPOINT: {{ .Values.minio.service.apiPort | quote }}
  MINIO_DEFAULT_BUCKET: {{ .Values.minio.env.defaultBucket | quote }}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "chart.fullname" . }}-superset-config
  labels:
    {{- include "chart.labels" . | nindent 4 }}
data:
  superset_config.py: |
    import os
    
    # Superset specific config
    ROW_LIMIT = 5000
    
    SUPERSET_WEBSERVER_PORT = 8088
    
    # Flask App Builder configuration
    # Your App secret key will be used for securely signing the session cookie
    # and encrypting sensitive information on the database
    # Make sure you are changing this key for your deployment with a strong key.
    # You can generate a strong key using `openssl rand -base64 42`
    # Alternatively you can set it with `SUPERSET_SECRET_KEY` environment var.
    SECRET_KEY = os.environ.get('SUPERSET_SECRET_KEY', 'superduperset')
    
    # The SQLAlchemy connection string to your database backend
    # This connection defines the path to the database that stores your
    # superset metadata (slices, connections, tables, dashboards, ...).
    # Note that the connection information to connect to the datasources
    # you want to explore are managed directly in the web UI
    SQLALCHEMY_DATABASE_URI = 'postgresql://{{ .Values.superset.postgres.auth.user }}:{{ .Values.superset.postgres.auth.password }}@{{ include "chart.fullname" . }}-postgres-superset/{{ .Values.superset.postgres.auth.database }}'
    
    # Flask-WTF flag for CSRF
    WTF_CSRF_ENABLED = True
    # Add endpoints that need to be exempt from CSRF protection
    WTF_CSRF_EXEMPT_LIST = []
    # A CSRF token that expires in 1 year
    WTF_CSRF_TIME_LIMIT = 60 * 60 * 24 * 365
    
    # Set this API key to enable Mapbox visualizations
    MAPBOX_API_KEY = ''